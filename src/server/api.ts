import express from 'express';
import OpenAI from 'openai';
import cors from 'cors';
import dotenv from 'dotenv';

dotenv.config();

const router = express.Router();

if (!process.env.OPENAI_API_KEY) {
  console.error('OPENAI_API_KEY is not set in environment variables');
  process.exit(1);
}

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

interface NutritionData {
  name: string;
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
}

// Validate AI response
function validateAiResponse(data: any): data is NutritionData {
  if (!data || typeof data !== 'object') return false;

  const requiredFields = ['name', 'calories', 'protein', 'fat', 'carbs'];
  
  for (const field of requiredFields) {
    if (!(field in data)) return false;
    
    if (field === 'name') {
      if (typeof data[field] !== 'string' || !data[field].trim()) return false;
    } else {
      if (typeof data[field] !== 'number' || data[field] < 0) return false;
    }
  }

  const limits = {
    calories: 5000,
    protein: 200,
    fat: 200,
    carbs: 400
  };

  for (const [field, limit] of Object.entries(limits)) {
    if (data[field] > limit) return false;
  }

  return true;
}

// API endpoint for meal analysis
const analyzeMealHandler: express.RequestHandler = async (req, res) => {
  try {
    const { description } = req.body;
    console.log('Analyzing meal:', description);

    if (!description) {
      res.status(400).json({ 
        error: 'Description is required',
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞'
      });
      return;
    }

    console.log('Making OpenAI request...');
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

üéØ –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã) –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç.

üìè –ü—Ä–∞–≤–∏–ª–∞:
1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é.
   –ü—Ä–∏–º–µ—Ä: "–≥—Ä–µ—á–∫–∞ 150 –≥" ‚Üí —Å—á–∏—Ç–∞–µ—à—å –ö–ë–ñ–£ –Ω–∞ 150 –≥.
2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —à—Ç—É–∫–∞—Ö, –ø–æ—Ä—Ü–∏—è—Ö, —É–ø–∞–∫–æ–≤–∫–∞—Ö ‚Äî –æ—Ü–µ–Ω–∏ –º–∞—Å—Å—É —Å–∞–º –ø–æ —Å–≤–æ–µ–º—É –æ–ø—ã—Ç—É.
   –ü—Ä–∏–º–µ—Ä—ã:
   - 1 —è–π—Ü–æ ‚âà 60 –≥
   - 1 —Å—ã—Ä–Ω–∏–∫ ‚âà 70 –≥
   - 1 –ø–µ–ª—å–º–µ–Ω—å ‚âà 15 –≥
   - 1 –ª–æ–∂–∫–∞ ‚âà 20 –≥
   - 1 –ø–æ—Ä—Ü–∏—è —Å—É–ø–∞ ‚âà 300 –≥
3. –ï—Å–ª–∏ –º–∞—Å—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ‚Äî —Å—á–∏—Ç–∞–π –ö–ë–ñ–£ –Ω–∞ 100 –≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
4. –í–æ–∑–≤—Ä–∞—â–∞–π –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Å—ë —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
5. –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª—è–π –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
6. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞.

üì¶ –§–æ—Ä–º–∞—Ç:
{
  "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
  "calories": —á–∏—Å–ª–æ,
  "protein": —á–∏—Å–ª–æ,
  "fat": —á–∏—Å–ª–æ,
  "carbs": —á–∏—Å–ª–æ
}

üìå –ü—Ä–∏–º–µ—Ä—ã:
"–≥—Ä–µ—á–∫–∞ 100 –≥" ‚Üí
{"name": "–ì—Ä–µ—á–∫–∞", "calories": 313, "protein": 12.6, "fat": 3.3, "carbs": 62.0}

"2 –ø–µ–ª—å–º–µ–Ω—è" ‚Üí
{"name": "–ü–µ–ª—å–º–µ–Ω–∏", "calories": 90, "protein": 5.0, "fat": 3.5, "carbs": 8.0}

"–±–ª—é–¥–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ" ‚Üí
{"name": "", "calories": 0, "protein": 0, "fat": 0, "carbs": 0}`
        },
        {
          role: 'user',
          content: description
        }
      ],
      temperature: 0.1,
      response_format: { type: 'json_object' }
    });

    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ OpenAI
    console.log('OpenAI response details:', {
      id: response.id,
      model: response.model,
      created: response.created,
      choices: response.choices.map(choice => ({
        index: choice.index,
        finishReason: choice.finish_reason,
        hasContent: !!choice.message.content,
        contentLength: choice.message.content?.length || 0
      }))
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞
    if (!response.choices || response.choices.length === 0) {
      console.error('OpenAI response has no choices:', response);
      res.status(500).json({
        error: 'Invalid AI response',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        debug: process.env.NODE_ENV === 'development' ? { response } : undefined
      });
      return;
    }

    const content = response.choices[0].message.content;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º content –Ω–∞ null/undefined/–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (!content || content.trim() === '') {
      console.error('Empty or invalid content from OpenAI:', {
        content,
        choice: response.choices[0]
      });
      
      res.json({
        name: "",
        calories: 0,
        protein: 0,
        fat: 0,
        carbs: 0
      });
      return;
    }

    let nutritionData: unknown;
    try {
      nutritionData = JSON.parse(content);
      console.log('Parsed nutrition data:', nutritionData);
    } catch (error) {
      console.error('Failed to parse OpenAI response:', error);
      console.error('Raw content:', content);
      
      res.json({
        name: "",
        calories: 0,
        protein: 0,
        fat: 0,
        carbs: 0
      });
      return;
    }

    if (!validateAiResponse(nutritionData)) {
      console.error('Invalid nutrition data format:', {
        data: nutritionData,
        validationError: 'Response does not match expected schema'
      });
      
      res.json({
        name: "",
        calories: 0,
        protein: 0,
        fat: 0,
        carbs: 0
      });
      return;
    }

    console.log('Sending response:', nutritionData);
    res.json(nutritionData);
  } catch (error) {
    console.error('Error in meal analysis:', error);
    if (error instanceof Error) {
      console.error('Error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack,
        response: error.hasOwnProperty('response') ? (error as any).response : undefined
      });
    }
    
    res.json({
      name: "",
      calories: 0,
      protein: 0,
      fat: 0,
      carbs: 0
    });
  }
};

router.post('/analyze-meal', analyzeMealHandler);

export default router; 