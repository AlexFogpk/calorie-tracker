import express from 'express';
import OpenAI from 'openai';
import cors from 'cors';
import dotenv from 'dotenv';
import { NutritionData, AIAnalysis } from '../types';

dotenv.config();

const router = express.Router();

if (!process.env.OPENAI_API_KEY) {
  console.error('OPENAI_API_KEY is not set in environment variables');
  process.exit(1);
}

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Validate AI response
function validateAiResponse(data: any): data is NutritionData {
  if (!data || typeof data !== 'object') {
    console.error('Invalid data type:', typeof data);
    return false;
  }

  const requiredFields = ['calories', 'protein', 'fat', 'carbs', 'weight', 'name'];
  
  for (const field of requiredFields) {
    if (!(field in data)) {
      console.error(`Missing required field: ${field}`);
      return false;
    }
    
    if (field === 'name') {
      if (typeof data[field] !== 'string') {
        console.error(`Invalid name type: ${typeof data[field]}`);
        return false;
      }
      continue;
    }
    
    if (typeof data[field] !== 'number' || isNaN(data[field]) || data[field] < 0) {
      console.error(`Invalid ${field} value:`, data[field]);
      return false;
    }
  }

  const limits = {
    calories: 5000,
    protein: 200,
    fat: 200,
    carbs: 400,
    weight: 10000
  };

  for (const [field, limit] of Object.entries(limits)) {
    if (data[field] > limit) {
      console.error(`${field} exceeds limit:`, data[field], '>', limit);
      return false;
    }
  }

  return true;
}

// API endpoint for meal analysis
const analyzeMealHandler: express.RequestHandler = async (req, res) => {
  try {
    const { description } = req.body;
    console.log('Analyzing meal:', description);

    if (!description) {
      res.status(400).json({ 
        error: 'Description is required',
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞'
      });
      return;
    }

    console.log('Making OpenAI request...');
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

üéØ –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Å—Å—É –∏ –ö–ë–ñ–£ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã) –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç.

üìè –ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Å—Å—ã (weight):

1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ—á–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:
   "–≥—Ä–µ—á–∫–∞ 150 –≥" ‚Üí weight = 150
   "—Ä–∏—Å 200–≥" ‚Üí weight = 200

2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —à—Ç—É–∫–∞—Ö/–ø–æ—Ä—Ü–∏—è—Ö ‚Äî –æ—Ü–µ–Ω–∏ —Ä–µ–∞–ª—å–Ω—É—é –º–∞—Å—Å—É:
   "3 —è–±–ª–æ–∫–∞" ‚Üí weight ‚âà 450 (–ø—Ä–∏–º–µ—Ä–Ω–æ 150–≥ –∫–∞–∂–¥–æ–µ)
   "2 –∫—É—Ä–∏–Ω—ã—Ö —è–π—Ü–∞" ‚Üí weight ‚âà 120 (–ø—Ä–∏–º–µ—Ä–Ω–æ 60–≥ –∫–∞–∂–¥–æ–µ)
   "4 –ø–µ–ª—å–º–µ–Ω—è" ‚Üí weight ‚âà 60 (–ø—Ä–∏–º–µ—Ä–Ω–æ 15–≥ –∫–∞–∂–¥—ã–π)

3. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Å—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ä—ã:
   "—Å—Ç–æ–ª–æ–≤–∞—è –ª–æ–∂–∫–∞ –º–∞—Å–ª–∞" ‚Üí weight ‚âà 15-20
   "—á–∞–π–Ω–∞—è –ª–æ–∂–∫–∞ —Å–∞—Ö–∞—Ä–∞" ‚Üí weight ‚âà 5-7

4. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ—Ä—Ü–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏:
   "–ø–æ—Ä—Ü–∏—è –±–æ—Ä—â–∞" ‚Üí weight ‚âà 300-350
   "—Ç–∞—Ä–µ–ª–∫–∞ —Ä–∏—Å–∞" ‚Üí weight ‚âà 200-250
   "–∫—É—Å–æ–∫ –ø–∏—Ü—Ü—ã" ‚Üí weight ‚âà 150-180

5. –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —É–∫–∞–∑–∞–Ω –±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:
   - –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ—Ä—Ü–∏—é 100–≥
   - —É–∫–∞–∂–∏ weight = 100

‚ùó –í–∞–∂–Ω–æ: –≤—Å–µ–≥–¥–∞ –æ—Ü–µ–Ω–∏–≤–∞–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π –º–∞—Å—Å—É –≤ –≥—Ä–∞–º–º–∞—Ö –≤ –ø–æ–ª–µ weight!

üì¶ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ JSON):
{
  "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
  "weight": —á–∏—Å–ª–æ,  // –º–∞—Å—Å–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
  "calories": —á–∏—Å–ª–æ,
  "protein": —á–∏—Å–ª–æ,
  "fat": —á–∏—Å–ª–æ,
  "carbs": —á–∏—Å–ª–æ
}

üìå –ü—Ä–∏–º–µ—Ä—ã:
"–≥—Ä–µ—á–∫–∞ 150 –≥" ‚Üí
{"name": "–ì—Ä–µ—á–∫–∞", "weight": 150.0, "calories": 469.5, "protein": 18.9, "fat": 5.0, "carbs": 93.0}

"2 –ø–µ–ª—å–º–µ–Ω—è" ‚Üí
{"name": "–ü–µ–ª—å–º–µ–Ω–∏", "weight": 30.0, "calories": 90.0, "protein": 5.0, "fat": 3.5, "carbs": 8.0}

"3 —è–±–ª–æ–∫–∞" ‚Üí
{"name": "–Ø–±–ª–æ–∫–∏", "weight": 450.0, "calories": 234.0, "protein": 1.1, "fat": 0.7, "carbs": 57.2}

"—Å—Ç–æ–ª–æ–≤–∞—è –ª–æ–∂–∫–∞ –º–∞—Å–ª–∞" ‚Üí
{"name": "–ú–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ", "weight": 17.0, "calories": 153.0, "protein": 0.0, "fat": 17.0, "carbs": 0.0}

"–±–∞–Ω–∞–Ω" ‚Üí
{"name": "–ë–∞–Ω–∞–Ω", "weight": 100.0, "calories": 89.0, "protein": 1.1, "fat": 0.3, "carbs": 22.8}

"–±–ª—é–¥–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ" ‚Üí
{"name": "", "weight": 0.0, "calories": 0.0, "protein": 0.0, "fat": 0.0, "carbs": 0.0}`
        },
        {
          role: 'user',
          content: description
        }
      ],
      temperature: 0.1,
      response_format: { type: 'json_object' }
    });

    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ OpenAI
    console.log('OpenAI response details:', {
      id: response.id,
      model: response.model,
      created: response.created,
      choices: response.choices.map(choice => ({
        index: choice.index,
        finishReason: choice.finish_reason,
        hasContent: !!choice.message.content,
        contentLength: choice.message.content?.length || 0
      }))
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞
    if (!response.choices || response.choices.length === 0) {
      console.error('OpenAI response has no choices:', response);
      res.status(500).json({
        error: 'Invalid AI response',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        debug: process.env.NODE_ENV === 'development' ? { response } : undefined
      });
      return;
    }

    const content = response.choices[0].message.content;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º content –Ω–∞ null/undefined/–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (!content || content.trim() === '') {
      console.error('Empty or invalid content from OpenAI:', {
        content,
        choice: response.choices[0]
      });
      
      res.json({
        name: "",
        weight: 0,
        calories: 0,
        protein: 0,
        fat: 0,
        carbs: 0
      });
      return;
    }

    let nutritionData: unknown;
    try {
      nutritionData = JSON.parse(content);
      console.log('Raw AI response content:', content);
      console.log('Parsed nutrition data:', nutritionData);
      
      // Validate the parsed data
      if (!validateAiResponse(nutritionData)) {
        console.error('Invalid nutrition data format:', nutritionData);
        throw new Error('Invalid AI response format');
      }
      
      // Ensure all numeric fields are numbers
      const validatedData: NutritionData = {
        name: nutritionData.name,
        weight: Number(nutritionData.weight),
        calories: Number(nutritionData.calories),
        protein: Number(nutritionData.protein),
        fat: Number(nutritionData.fat),
        carbs: Number(nutritionData.carbs)
      };
      
      console.log('Validated and normalized data:', validatedData);
      res.json(validatedData);
    } catch (error) {
      console.error('Failed to process AI response:', error);
      console.error('Raw content:', content);
      
      res.json({
        name: "",
        weight: 0,
        calories: 0,
        protein: 0,
        fat: 0,
        carbs: 0
      });
    }
  } catch (error) {
    console.error('Error in meal analysis:', error);
    if (error instanceof Error) {
      console.error('Error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack,
        response: error.hasOwnProperty('response') ? (error as any).response : undefined
      });
    }
    
    res.json({
      name: "",
      weight: 0,
      calories: 0,
      protein: 0,
      fat: 0,
      carbs: 0
    });
  }
};

router.post('/analyze-meal', analyzeMealHandler);

export default router; 